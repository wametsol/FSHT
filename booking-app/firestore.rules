rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	
    match/{col} {
    allow create: if request.auth != null
    }
  
    match /{booker}/baseInformation {
    	allow create: if request.auth != null
      allow read: if resource.data.siteSettings.visibleToPublic || resource.data.admins.keys().hasAll([(request.auth.uid)])
      allow update: if resource.data.admins.keys().hasAll([(request.auth.uid)])
    }
    match /{booker}/bookings {
    allow create: if get(/databases/$(database)/documents/$(booker)/baseInformation).data.admins.keys().hasAll([(request.auth.uid)])
    }
    match /bookerCollection/{documents} {
  	allow read, create: if true
  }
    match /{booker}/bookings/{document=**}/{days} {
    	allow create: if true
    	allow read: if get(/databases/$(database)/documents/$(booker)/baseInformation).data.siteSettings.visibleToPublic == true || get(/databases/$(database)/documents/$(booker)/baseInformation).data.admins.keys().hasAll([(request.auth.uid)])
      allow update: if get(/databases/$(database)/documents/$(booker)/baseInformation).data.admins.keys().hasAll([(request.auth.uid)]) ||
      request.resource.data.diff(resource.data).affectedKeys().hasAll([(request.auth.uid)]) ||
      request.resource.data.diff(resource.data).addedKeys() != null
    }

    match /userCollection/{userDoc} {
      allow read: if request.auth != null
      allow delete: if resource.data.uid == request.auth.uid
      allow create, update: if request.auth != null
    }
    
  }
}